---
import Layout from "../layouts/Layout.astro";
import emailjs from "@emailjs/browser";
const response = await fetch("https://picsum.photos/v2/list?page=2&limit=20");
const photos = await response.json();

const errors = { name: "", email: "", subject: "", message: "" };
if (Astro.request.method === "POST") {
  try {
    const data = await Astro.request.formData();
    const name = data.get("name");
    const email = data.get("email");
    const subject = data.get("subject");
    const message = data.get("message");

    if (typeof name !== "string" || name.length < 1) {
      errors.name += "Please enter a name. ";
    }
    if (typeof email !== "string") {
      errors.email += "Email is not valid. ";
    }
    if (typeof subject !== "string") {
      errors.subject += "Please enter a subject. ";
    }
    if (typeof message !== "string" || message.length == 0) {
      errors.message += "Please enter a message. ";
    }
    const hasErrors = Object.values(errors).some((msg) => msg);
    if (!hasErrors) {
      console.log(data);

      const form = {
        name,
        email,
        subject,
        message,
      };

      console.log(form);

      emailjs
        .send(
          import.meta.env?.PUBLIC_MAILJS_SERVICE_ID,
          import.meta.env?.PUBLIC_MAILJS_TEMPLATE_ID,
          form,
          import.meta.env?.PUBLIC_MAILJS_PUBLIC_KEY
        )
        .then(
          (result) => {
            console.log("result");
            console.log(result);
          },
          (error) => {
            console.log("error");
            console.log(error);
          }
        );
      // return Astro.redirect("/login");
    }

    // Do something with the data
  } catch (error) {
    if (error instanceof Error) {
      console.error(error.message);
    }
  }
}
---

<Layout>
  <div class="content" slot="body">
    <form method="POST">
      <div class="input">
        <label> Name:</label>
        <input type="text" name="name" placeholder="Name" />
        {errors.name && <p>{errors.name}</p>}
      </div>
      <div class="input">
        <label> Email:</label>
        <input type="text" name="email" placeholder="Email" />
        {errors.email && <p>{errors.email}</p>}
      </div>
      <div class="input">
        <label> Subject:</label>
        <input type="text" name="subject" placeholder="Subject" />
        {errors.subject && <p>{errors.subject}</p>}
      </div>
      <div class="input">
        <label> Message:</label>
        <textarea name="message" placeholder="Message"></textarea>
        {errors.message && <p>{errors.message}</p>}
      </div>
      <button>Send</button>
    </form>
  </div>
</Layout>

<script>
  const tx = document.getElementsByTagName("textarea")[0];
  console.log(tx.scrollHeight);
  // Min-height 100
  const height = tx.scrollHeight > 100 ? tx.scrollHeight : 100;
  tx.setAttribute("style", "height:" + height + "px;overflow-y:hidden;");
  tx.addEventListener("input", OnInput, false);

  function OnInput() {
    tx.style.height = "0";
    const height = tx.scrollHeight > 100 ? tx.scrollHeight : 100;
    tx.style.height = height + "px";
  }
</script>

<style lang="scss">
  .content {
    display: flex;
    flex-direction: column;
    align-items: center;

    .row {
      display: flex;
      gap: 1rem;
    }

    .col {
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    form {
      display: flex;
      flex: 1;
      flex-direction: column;
      gap: 20px;
      padding: 2rem;
      border: solid white 5px;
      width: -webkit-fill-available;
      max-width: 600px;

      .input {
        display: flex;
        flex-direction: column;
        gap: 10px;

        label {
        }

        textarea {
          all: unset;
          background-color: white;
          padding: 5px;
          padding-top: 10px;
        }

        input {
          all: unset;
          background-color: white;
          padding: 5px;
        }
      }

      button {
        all: unset;
        background-color: white;
        padding: 10px 15px;
        cursor: pointer;
        align-self: flex-end;
      }
    }
  }
</style>
